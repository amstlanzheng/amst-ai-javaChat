version: '3.9'

services:
  mysql:
    image: mysql
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_HOST_PORT}:3306"
    volumes:
      - /mydata/docker/mysqlRedis/data/mysql/data:/var/lib/mysql
      - /mydata/docker/mysqlRedis/data/mysql/conf:/etc/mysql/conf.d
      - /mydata/docker/mysqlRedis/data/mysql/logs:/var/log/mysql
    networks:
      - app-network


  minio:
    image: minio/minio:latest
    container_name: ${MINIO_CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${MINIO_API_PORT}:9000"   # API端口
      - "${MINIO_CONSOLE_PORT}:9001"   # 控制台端口
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DOMAIN: ${MINIO_DOMAIN}
    volumes:
      - /mydata/docker/mysqlRedis/data/minio/data:/data
      - /mydata/docker/mysqlRedis/data/minio/config:/root/.minio
    command: server --console-address ":9001" /data
    networks:
      - app-network


  postgres:
    image: pgvector/pgvector:pg17
    container_name: ${POSTGRES_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Shanghai
    ports:
      - "${POSTGRES_HOST_PORT}:5432"
    volumes:
      - /mydata/docker/mysqlRedis/data/postgres/data:/var/lib/postgresql/data
    networks:  # 将两个服务连接到同一个网络
      - app-network



  pgadmin:  # pgAdmin4 服务
    image: dpage/pgadmin4:latest
    container_name: ${PGADMIN_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}  # 设置登录 pgAdmin 的邮箱
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}   # 设置登录 pgAdmin 的密码
    ports:
      - "${PGADMIN_HOST_PORT}:80"  # 将 pgAdmin 的 Web 界面映射到主机的 8888 端口
    volumes:
      - /mydata/docker/mysqlRedis/data/pgadmin/data:/var/lib/pgadmin  # 持久化 pgAdmin 的配置数据
    networks:  # 将两个服务连接到同一个网络
      - app-network
    depends_on:  # 指定依赖关系，保证先启动 postgres 服务
      - postgres



  redis:
    image: redis
    container_name: ${REDIS_CONTAINER_NAME}
    command: redis-server --requirepass ${REDIS_PASSWORD} --bind 0.0.0.0
    restart: unless-stopped
    ports:
      - "${REDIS_HOST_PORT}:6379"
    volumes:
      - /mydata/docker/mysqlRedis/data/redis/data:/data
      - /mydata/docker/mysqlRedis/data/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network

  redis-stack:
    image: redis/redis-stack:latest
    container_name: ${REDIS_STACK_CONTAINER_NAME}
    ports:
      - "${REDIS_STACK_PORT}:6379"
      - "${REDIS_INSIGHT_PORT}:8001"  # RedisInsight 管理界面
    volumes:
      - /mydata/docker/mysqlRedis/data/redisStark/data:/data  # 数据持久化目录
      - /mydata/docker/mysqlRedis/data/redisStark/backups:/backups  # 备份目录
      - /mydata/docker/mysqlRedis/data/redisStark/etc/redis-stack.conf:/etc/redis-stack/redis-stack.conf
    environment:
      - REDIS_STACK_DATA_DIR=/data
      - REDIS_BACKUP_DIR=/backups
      - REDIS_PASSWORD=${REDIS_STACK_PASSWORD}  # 设置访问密码
    command:
      - redis-stack-server
      - /etc/redis-stack/redis-stack.conf
      - --save 60 1  # 60秒内至少有1个key改变则保存
      - --appendonly yes  # 启用AOF持久化
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
